<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
    <import resource="log-setup.xml"/>
    <import resource="filter-setup.xml"/>
    <import resource="marshaller-setup.xml"/>
    <import resource="aws-setup.xml"/>
    <context:property-placeholder location="classpath:/default.properties"/>
    <bean name="sqsClient" class="com.amazonaws.services.sqs.AmazonSQSAsyncClient">
        <constructor-arg>
            <bean class="com.amazonaws.auth.BasicAWSCredentials">
                <constructor-arg value="${access.key}"/>
                <constructor-arg value="${secret.key}"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean name="s3Client" class="com.amazonaws.services.s3.AmazonS3Client">
        <constructor-arg>
            <bean class="com.amazonaws.auth.BasicAWSCredentials">
                <constructor-arg value="${access.key}"/>
                <constructor-arg value="${secret.key}"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="com.amazonaws.ClientConfiguration"></bean>
        </constructor-arg>
    </bean>
    <bean id="myAggregationStrategy" class="content.integration.aggregation.MyAggregationStrategy"/>

    <camelContext id="content.journal" xmlns="http://camel.apache.org/schema/spring">
        <!-- here is a sample which processes the input files
             (leaving them in place - see the 'noop' flag)
             then performs content based routing on the message using XPath -->
        <dataFormats>
            <json id="json" library="Jackson"/>
            <jaxb id="jaxb" contextPath="content.integration.model"/>
        </dataFormats>
        <route id="content.journal.acquisition">
            <from id="GetNewFiles" uri="file:src/data?noop=true"/>
            <wireTap id="AuditMessage"
                     uri="file:target/journal/article/audit"/>         <!-- Fire&Forget MEP for auditing purposes -->
            <setHeader headerName="CamelAwsS3Key"><simple>load/archive/${header.CamelFileName}</simple></setHeader>
            <to uri="aws-s3://1p-graph?amazonS3Client=#s3Client"></to>
            <choice id="RouteByFileFormat">
                <when id="isXML">
                    <simple id="XML">${header.CamelFileName} regex '^.*xml$'</simple>
                    <choice id="isMultiple">
                        <when id="BULK">
                            <xpath id="MULTIPLE">count(/Journal/article) > 1</xpath>
                            <split id="SplitByArticle" parallelProcessing="true">
                                <xpath id="SplitByPerson">/Journal/article</xpath>
                                <setProperty propertyName="Title">
                                    <xpath>/article/@title</xpath>
                                </setProperty>
<!--                                <process id="LogMessage" ref="logProcessor"></process> -->
                                <bean id="EnrichMessage" ref="messageEnrichmentBean" method="addJournalId"></bean>
                                <process id="FilterMessage" ref="messageFilter"></process>
                                <removeHeader headerName="ArticleTitle"></removeHeader>
                                <log id="LogMessage" message="Sending each article to SQS Message Queue"/>
                                <to id="DeliverJSON" uri="aws-sqs://arn:aws:sqs:us-west-2:509786517216:WorkflowTasksQueue?amazonSQSClient=#sqsClient"></to>
                            </split>
                        </when>
                        <otherwise id="SINGLE">
                            <log id="LogMessage" message="Sending single message to SQS Message Queue"/>
                            <bean id="EnrichMessage" ref="messageEnrichmentBean" method="addJournalId"></bean>
                            <to id="DeliverXML" uri="aws-sqs://arn:aws:sqs:us-west-2:509786517216:WorkflowTasksQueue?amazonSQSClient=#sqsClient"></to>
                        </otherwise>
                    </choice>
                </when>
                <when id="CSV">
                    <simple id="isCSV">${header.CamelFileName} regex '^.*csv'</simple>
                    <!--                //Custom marshaller
                    <transform>
                        <method bean="ArticleMarshaller" method="csvToXML"></method>
                    </transform> -->
                    <unmarshal id="ParseCSV"><bindy type="Csv" classType="content.integration.model.article"></bindy></unmarshal>
                    <marshal id="BuildJSON" ref="json"/>
                    <!-- AWS S3 client as a Spring bean - method specified although not required -->
                    <!-- <bean id="SendToS3" ref="myAWSClient" method="putFileinS3"></bean> -->
                    <setHeader headerName="CamelAwsS3Key"><simple>load/out/${header.CamelFileName}</simple></setHeader>
                    <to id="DeliverCSV" uri="aws-s3://1p-graph?amazonS3Client=#s3Client"></to>
                </when>
                <otherwise id="Unexpected file format">
                    <to id="StoreLocallyOtherFileFormat" uri="file:target/journal/article/others"/>
                </otherwise>
            </choice>
        </route>
        <route id="content.journal.curation">
            <from uri="aws-sqs://arn:aws:sqs:us-west-2:509786517216:WorkflowTasksQueue?amazonSQSClient=#sqsClient&amp;maxMessagesPerPoll=1"></from>
            <setProperty propertyName="journalId"><xpath>/article/@journalId</xpath></setProperty>
            <aggregate id="AggregateArticles" strategyRef="myAggregationStrategy" completionSize="5">
                <correlationExpression>
                    <xpath id="getCorrelationId">/article/@journalId</xpath>
                </correlationExpression>
                <bean id="FormatXMLMessage" ref="messageEnrichmentBean" method="addParent"></bean>
                <unmarshal id="UnmarshallXML" ref="jaxb"/>
                <marshal id="BuildJSONMessage" ref="json"/>
                <setHeader headerName="CamelAwsS3Key"><simple>load/out/${exchangeProperty.journalId}.json</simple></setHeader>
                <to id="StoreAggregatedJournalinS3" uri="aws-s3://1p-graph?amazonS3Client=#s3Client"></to>
            </aggregate>
        </route>
    </camelContext>
</beans>
